using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using Microsoft.SqlServer.Server;

using Jhu.SqlServer.Array;
namespace BloomFilter
{
    public partial class FilterUDFs
    {
        [Microsoft.SqlServer.Server.SqlFunction]
        public static SqlBinary AddFilterToSnap(SqlBigIntArrayMax ids, ref int hashFunctions, ref int expectedCap)
        {
            const int expectedFilterCapacity = 1000;
            expectedCap = expectedFilterCapacity;
            float errorRate = BloomFilter.Filter<long>.bestErrorRate(expectedFilterCapacity);
            hashFunctions = BloomFilter.Filter<long>.bestK(expectedFilterCapacity, errorRate);

            BloomFilter.Filter<long> filter = new BloomFilter.Filter<long>(expectedFilterCapacity, errorRate, hashFunctions);
            long[] idsArray = ids.ToArray();
            for (int i = 0; i < idsArray.Length; i++)
            {
                filter.Add(idsArray[i]);
            }
            return (SqlBinary)filter.convertToByteArray();
        }

        [Microsoft.SqlServer.Server.SqlFunction]
        public static SqlBoolean checkFilterForId(SqlBinary filterAsBinary, SqlInt64 id, SqlInt32 hashFunctions)
        {
            BloomFilter.Filter<long> filter = new BloomFilter.Filter<long>((byte[])filterAsBinary, (int)hashFunctions);
            return filter.Contains((long)id);
        }

    };

}

